{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","season","lat","month","getSeason","Date","getMonth","className","Spinner","message","defaultProps","App","state","long","errormessage","display","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","errorMessage","this","style","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAGMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,sBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,mBACNC,SAAU,eAyBCE,MAbf,YAAiC,IACzBC,EATU,SAACC,EAAKC,GACtB,OAAIA,EAAQ,GAAKA,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,SAKfE,CADe,EAAPF,KACO,IAAIG,MAAOC,YADX,EAEHX,EAAaM,GAAhCJ,EAFsB,EAEtBA,KAAMC,EAFgB,EAEhBA,SAEd,OACE,yBAAKS,UAAS,yBAAoBN,IAChC,uBAAGM,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC5BZU,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACE,yBAAKF,UAAS,oBACZ,yBAAKA,UAAU,sBAAsBE,KAK3CD,EAAQE,aAAe,CACrBD,QAAS,WAGID,QCTTG,E,2MACJC,MAAQ,CACNV,IAAK,KACLW,KAAM,KACNC,aAAc,GACdC,QAAS,S,mFAGU,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAAAC,GACE,EAAKC,SAAS,CACZnB,IAAKkB,EAASE,OAAOC,SACrBR,QAAS,YAGb,SAAAS,GACE,EAAKH,SAAS,CACZI,aAAcD,EAAIf,QAClBM,QAAS,c,+BAKP,IAAD,EAC6BW,KAAKd,MAAjCV,EADD,EACCA,IAAKW,EADN,EACMA,KAAMY,EADZ,EACYA,aACnB,OACE,6BACE,yBAAKE,MAAO,CAAEZ,QAASW,KAAKd,MAAMG,UAChC,kBAAC,EAAD,CAASN,QAAQ,qCAEV,OAARP,EACC,4BAAKuB,GAEL,kBAAC,EAAD,CAAiBvB,IAAKA,EAAKW,KAAMA,EAAMY,aAAcA,S,GAlC7CG,aAyClBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.9c05db09.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SeasonDisplay.css\";\r\n\r\nconst seasonConfig = {\r\n  summer: {\r\n    text: \"Let's hi the beach!\",\r\n    iconName: \"sun\"\r\n  },\r\n  winter: {\r\n    text: \"Burr it's chilly\",\r\n    iconName: \"snowflake\"\r\n  }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"summer\" : \"winter\";\r\n  } else {\r\n    return lat < 0 ? \"summer\" : \"winter\";\r\n  }\r\n};\r\n\r\nfunction SeasonDisplay({ lat }) {\r\n  const season = getSeason(lat, new Date().getMonth());\r\n  const { text, iconName } = seasonConfig[season];\r\n\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`icon-left massive ${iconName} icon`} />\r\n      <h1>{text}</h1>\r\n      <i className={`icon-right massive ${iconName} icon`} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SeasonDisplay;\r\n","import React from \"react\";\r\n\r\nconst Spinner = ({ message }) => {\r\n  return (\r\n    <div className={`ui active dimmer`}>\r\n      <div className=\"ui big text loader\">{message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n  message: \"Loading\"\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SeasonalDisplay from \"./SeasonDisplay\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    lat: null,\r\n    long: null,\r\n    errormessage: \"\",\r\n    display: \"block\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      position => {\r\n        this.setState({\r\n          lat: position.coords.latitude,\r\n          display: \"none\"\r\n        });\r\n      },\r\n      err => {\r\n        this.setState({\r\n          errorMessage: err.message,\r\n          display: \"none\"\r\n        });\r\n      }\r\n    );\r\n  }\r\n  render() {\r\n    const { lat, long, errorMessage } = this.state;\r\n    return (\r\n      <div>\r\n        <div style={{ display: this.state.display }}>\r\n          <Spinner message=\"Waiting for location request...\" />\r\n        </div>\r\n        {lat === null ? (\r\n          <h1>{errorMessage}</h1>\r\n        ) : (\r\n          <SeasonalDisplay lat={lat} long={long} errorMessage={errorMessage} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}